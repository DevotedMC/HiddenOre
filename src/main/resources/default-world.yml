world_name: world
clear_ores:
  replace:
    - IRON_ORE
    - REDSTONE_ORE
    - GLOWING_REDSTONE_ORE
    - GOLD_ORE
    - COAL_ORE
    - DIAMOND_ORE
    - EMERALD_ORE
    - LAPIS_ORE
    with: STONE
tools:
 # Giving a tool ignore:all:true will make it the default catchall, if specified in a config.
 # So if you have a "default" behavior you want for any non-specified tool, use that.
 # Great for things that are often broken by hand or with random crap held, like dirt, sand, gravel.
 # "ignore" section is ignored but "modifiers" section will be applied.
 anything:
  ignore:
   all: true
  modifiers:
   dropChance: 1.0
   minAmount: 0.0
   maxAmount: 0.0
 # Give the item a "friendly name" that you'll use in the "tools" section of each drop config.
 wood_pickaxe:
  # Open an issue if the config-advanced.yml data doesn't give you enough to go on to
  #  design the template of your desire.
  template:
   ==: org.bukkit.inventory.ItemStack
   type: WOOD_PICKAXE
   amount: 1
  ignore:
   # Ignore the amount held.
   amount: true
   # Ignore the durability of the item held.
   durability: true
   # Ignore all enchantments.
   enchants: true
   # Ignore any enchantments not specified in the template
   otherEnchants: true
   # Ignore the specific lvl of the enchantments considered
   enchantsLvl: true
   # Ignore any differences in lore
   lore: true
   # Ignore any differences in display name.
   name: true
  modifiers:
   # Multiplier to drop chance; applied _after_ biome computation
   dropChance: 1.0
   # Adder on minimum drop size; so, drop config min + this min.
   minAmount: 0.0
   # Adder on maximum drop size; so, drop config max + this max. Both can be negative.
   maxAmount: 0.0
 gold_pickaxe:
  template:
   ==: org.bukkit.inventory.ItemStack
   type: GOLD_PICKAXE
   amount: 1
  ignore:
   amount: true
   durability: true
   enchants: true
   otherEnchants: true
   enchantsLvl: true
   lore: true
   name: true
  modifiers:
   dropChance: 1.0
   minAmount: 0.0
   maxAmount: 0.0
 iron_pickaxe:
  template:
   ==: org.bukkit.inventory.ItemStack
   type: IRON_PICKAXE
   amount: 1
  ignore:
   amount: true
   durability: true
   enchants: true
   otherEnchants: true
   enchantsLvl: true
   lore: true
   name: true
  modifiers:
   dropChance: 1.0
   minAmount: 0.0
   maxAmount: 0.0
 stone_pickaxe:
  template:
   ==: org.bukkit.inventory.ItemStack
   type: STONE_PICKAXE
   amount: 1
  ignore:
   amount: true
   durability: true
   enchants: true
   otherEnchants: true
   enchantsLvl: true
   lore: true
   name: true
  modifiers:
   dropChance: 1.0
   minAmount: 0.0
   maxAmount: 0.0
 diamond_pickaxe:
  template:
   ==: org.bukkit.inventory.ItemStack
   type: DIAMOND_PICKAXE
   amount: 1
  ignore:
   amount: true
   durability: true
   enchants: true
   otherEnchants: true
   enchantsLvl: true
   lore: true
   name: true
  modifiers:
   dropChance: 1.0
   minAmount: 0.0
   maxAmount: 0.0
states:
 hasteDebuff:
  haste: [0.8, 0.5]
 fatigueBuff:
  fatigue: [1.2, 1.5]
 generalRebalance:
  haste: [0.9, 0.7]
  fatigue: [1.1, 1.3]
  nausea: [0.5, 0.3, 0.1]
  luck: [2.0, 3.0, 4.0]
  badluck: [0.1, 0.01, 0.002]
  blindness: [0.0, 0.0, 0.0]
blocks:
 # This defines for which types of things drops are possible. Give each "block config" a friendly name.
 stone:
  # Name the 'root type' of this block config using its Bukkit material name.
  material: STONE
  # Indicate if all subtypes of material are included under this block config. If false, you must define a "types" list
  allTypes: true
  # If any of the drops for this block have Transform mode enabled, you can specify a list of blocks that,
  # in addition to the block defined above, can be transformed.
  validTransforms:
    # Use the same style of definition as above. Throwaway label, then 'material' and either 'allTypes' true, or define a "types" list.
    cobblestone:
      material: COBBLESTONE
      allTypes: true
    dirt:
      material: DIRT
      allTypes: false
      types:
       - 0
  # Drop mode. Multiple drops means that every possible drop is evaluated separately and all RNG-winners are grouped together in one big drop.
  #   false is more of a "classic" mode, where every possible drop's chance is accumulated, then a single Random number is generated and
  #   evaluated, resulting in either one or no drop.
  dropMultiple: false
  drops:
   # Here we define all the potential drops for this material/subtype. Give each "drop config" a friendly name.
   coal_ore:
    # Package is the list of ConfigurationSerializeable ItemStack that should constitutes this drop.
    # You can specify one or _many_ items, to emulate the true "drop chest" experience.
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: COAL_ORE
       # Amount is _not_ ignored. Use this as the "base" multipler. This amount will be multiplied by the randomly chosen "amount" configured
       # later and modified per tool and biome.
       amount: 1
    # A String list here of all the tool friendly-names that you defined in the root "tools" section which can trigger this drop.
    tools:
     - wood_pickaxe
     - stone_pickaxe
     - iron_pickaxe
     - gold_pickaxe
     - diamond_pickaxe
    # lowest Y in the map that this drop can be found.
    minY: 1
    # highest Y in the map that this drop can be found.
    maxY: 131
    # Base chance for this drop. This is percent chance / 100 -- so 1 is 100%, 0.1 is 10%, and 0.01 is 1%.
    chance: 0.01
    # multipliers of package's amount. Specify these separately or "amount" for a fixed value. If min and max are used,
    #  and this drop is selected, then a random value between min and max is chosen, after min and max are adjusted
    #  by biome or tool.
    minAmount: 2
    maxAmount: 8
    # Instead of dropping the package, attempts to transform nearby blocks of the same type as triggered this
    # drop into the package. If portions of the drop can't be transformed, they are still just dropped.
    # Default is false.
    transformIfAble: true
    # If for some reason transformation can't find a place to do its magic, should we use normal drop behavior?
    # Default is false.
    transformDropIfFails: false
    # If we do use normal drop behavior, what's the maximum drop size (after being constrained by maxAmount above)
    # Default is 1.
    transformMaxDropsIfFails: 1
    # Describes which state by name to use from the `states` section above.
    state: generalRebalance
   iron_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: IRON_ORE
       amount: 1
    tools:
     - stone_pickaxe
     - iron_pickaxe
     - diamond_pickaxe
    # Chance for XP to drop when this gen/drop occurs
    # you can add this section to "biomes" as well for unique biome-level drops
    # chance and amount are modified by tool.
    xp:
     # standard amount config; amount for "always" value, minAmount/maxAmount for randomized size
     amount: 1
     # Chance of XP to generate; this is a separate chance and computed separately for XP
     chance: 1.0
    minY: 1
    maxY: 67
    chance: 0.007
    minAmount: 1
    maxAmount: 4
    state: hasteDebuff
   gold_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: GOLD_ORE
       amount: 1
    tools:
     - iron_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 33
    chance: 0.001437
    minAmount: 1
    maxAmount: 4
    state: generalRebalance
   diamond_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: DIAMOND_ORE
       amount: 1
    tools:
     - iron_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 15
    chance: 0.0005427
    minAmount: 1
    maxAmount: 3
    state: generalRebalance
   redstone_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: REDSTONE_ORE
       amount: 1
    tools:
     - iron_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 15
    chance: 0.01025
    minAmount: 1
    maxAmount: 4
    state: generalRebalance
   lapis_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: LAPIS_ORE
       amount: 1
    tools:
     - stone_pickaxe
     - iron_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 33
    chance: 0.000597
    minAmount: 1
    maxAmount: 3
    state: fatigueBuff
   emerald_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: EMERALD_ORE
       amount: 1
    tools:
     - iron_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 32
    chance: 0.0
    minAmount: 1
    maxAmount: 2
    state: generalRebalance
    # Biomes can modify the chance rate. Anything specified in biome _replaces_ the base chance or min/max amounts,
    #  unlike tools which modify those values after biome is resolved.
    # States can be defined per biome as well, and similarly replaces base state assignment when within that biome.
    biomes:
     EXTREME_HILLS:
      chance: 0.001437
      state: fatigueBuff
     MUTATED_EXTREME_HILLS:
      chance: 0.001437
      state: hasteDebuff
     EXTREME_HILLS_WITH_TREES:
      chance: 0.001437
     MUTATED_EXTREME_HILLS_WITH_TREES:
      chance: 0.001437
 netherrack:
  material: NETHERRACK
  allTypes: true
  dropMultiple: false
  drops:
   quartz_ore:
    package:
     - ==: org.bukkit.inventory.ItemStack
       type: QUARTZ_ORE
       amount: 1
    tools:
     - wood_pickaxe
     - stone_pickaxe
     - iron_pickaxe
     - gold_pickaxe
     - diamond_pickaxe
    minY: 1
    maxY: 125
    chance: 0.0
    minAmount: 1
    maxAmount: 2
    biomes:
     HELL:
      # You can also modify the minimum Y values for a specific biome giving you complete control over where things can be found.
      minY: 1
      maxY: 125
      chance: 0.007
# Example w/ custom prefixes.
# sand:
#  material: SAND
#  allTypes: false
#  types:
#   - 0
#  dropMultiple: true
#  drops:
#   ink_sack:
#    package:
#     - ==: org.bukkit.inventory.ItemStack
#       type: INK_SACK
#       durability: 4
#       amount: 1
#    prefix: Lucky find! You've found a dropchest inner.
#    chance: 0.5
#    minAmount: 32
#    maxAmount: 64
#    biome:
#     PLAIN:
#      minY: 1
#      maxY: 128
#   quartz:
#    package:
#     - ==: org.bukkit.inventory.ItemStack
#       type: QUARTZ
#       amount: 1
#    prefix: Lucky find! You've found a dropchest.
#    chance: 0.25
#    amount: 5
# Example w/ drop suppression.
# glass:
#  material: GLASS
#  allTypes: true
#  suppressDrops: true
# This will prevent glass from dropping, ever.
#
# Pretty names section; many tools use Vault or other dependencies. If there's a strong enough request I can add it later, but
#  for now you can specify replacement names for your drops here. This values are only used in messaging to users about
#  their drops and are not applied to the items dropped.
pretty_names:
 DIAMOND: Diamond
 IRON_INGOT: Iron ingot
 GOLD_INGOT: Gold ingot
 QUARTZ: Quartz
 EMERALD: Emerald
 PRISMARINE_SHARD: Prismarine Shard
 REDSTONE: Redstone
 DIAMOND_ORE: Diamond Ore
 IRON_ORE: Iron Ore
 GOLD_ORE: Gold Ore
 QUARTZ_ORE: Quartz Ore
 EMERALD_ORE: Emerald Ore
 PRISMARINE: Prismarine
 REDSTONE_ORE: Redstone Ore
 LAPIS_ORE: Lapis Lazuli Ore
 COAL_ORE: Coal Ore
 COAL: Coal
 NETHERRACK: Netherrack
 # if the base type has subtypes, just specify those subtypes as a list. If you specify one, you'll need to specify all used subtypes.
 INK_SACK:
  4: Lapis Lazuli
